<?php
/**
 * @file
 * Code for CIS LMSless to place branding on page and create experience.
 */

/**
 * Implements hook_permission().
 */
function cis_lmsless_permission() {
  return array(
    'view lmsless bar' =>  array(
      'title' => t('View LMSless bar'),
      'description' => t('Provides context as to what system you are in and quick links.'),
    ),
    'view lmsless cis link' =>  array(
      'title' => t('View link to CIS space'),
      'description' => t('This shows the shortcut to the marketing space in CIS.'),
    ),
  );
}

/**
 * Implements hook_page_build().
 */
function cis_lmsless_page_build(&$page) {
  // make sure they have access to view this
  if (user_access('view lmsless bar') && !path_is_admin(current_path())) {
    $page['page_top']['cis_lmsless'] = array(
      '#weight' => -10,
      '#markup' => _cis_lmsless_assemble(),
    );
  }
}

/**
 * Implements preprocess_cis_lmsless_contextual_links()
 */
function cis_lmsless_preprocess_cis_lmsless_contextual_links(&$variables) {
  $variables['classes_array'][] = $variables['element']['class'];
  $variables['title'] = $variables['element']['title'];
  $variables['content'] = $variables['element']['#children'];
  $variables['more'] = $variables['element']['more'];
}

/**
 * Callback to assemble the bar
 */
function _cis_lmsless_assemble() {
  // assemble variables for theming
  $vars = _cis_lmsless_theme_vars();
  drupal_add_css(drupal_get_path('module', 'cis_lmsless') . '/css/cis_lmsless.css');
  return theme('cis_lmsless_bar', $vars);
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function cis_lmsless_form_masquerade_block_1_alter(&$form, &$form_state, $form_id) {
  $form['masquerade_user_field']['#chosen'] = TRUE;
  $form['masquerade_user_field']['#type'] = 'select';
  $field_conditions = array();
  // don't assume there is a section context when masquerade is enabled
  if (function_exists('_cis_section_load_section_by_id') && $gid = _cis_section_load_section_by_id(_cis_connector_section_context())) {
    $field_conditions = array('og_user_node' => array('target_id', array($gid), 'IN'));
  }
  // pull together the users
  $users = _cis_connector_assemble_entity_list('user', 'user', 'name', 'name', $field_conditions);
  $form['masquerade_user_field']['#options'] = $users;
  unset($form['masquerade_user_field']['#size']);
  unset($form['masquerade_user_field']['#autocomplete_path']);
}

/**
 * Callback to return common theme variables when styling CIS theme components
 * @return array array of variables to pass to the theme
 */
function _cis_lmsless_theme_vars() {
  // @todo cache this as it's around 250k memory transaction
  // ensure this doesn't load when it doesn't have to
  $vars = &drupal_static(__FUNCTION__);
  if (!isset($vars)) {
    $vars = array(
      'front_page' => variable_get('site_frontpage','node'),
      'site_name' => variable_get('site_name', t('Service')),
      'slogan' => variable_get('site_slogan', ''),
    );
    // build in section context if we have one we can pull
    if ($section = _cis_connector_section_context()) {
      $vars['section'] = $section;
    }
    // pull in the instructor contact info block
    $vars['contact_block'] = cis_service_connection_block_instructor_contact();
    // pull list of resources as an array
    $query = array('field_access_string' => $section, 'archived' => 0);
    // request the section of the user
    $cis_section_item = _cis_connection_query($query, 'field_collection_item');
    // make sure it got data
    $resources = array();
    if (!empty($cis_section_item) && !empty($cis_section_item['list'])) {
      $list = '';
      if (isset($cis_section_item['list'][0]['field_resources'])) {
        foreach ($cis_section_item['list'][0]['field_resources'] as $reid) {
          $resource = _cis_connection_object($reid['id'], $reid['resource']);
          $resources[$resource['field_machine_name']] = array(
            'title' => check_plain($resource['title']),
            'body' => check_markup($resource['body']['value'], $resource['body']['format'])
          );
          // check for tech support resource
          if (strpos($resource['field_machine_name'], 'tech_support') === 0 || strpos($resource['field_machine_name'], 'techsupport') === 0) {
            $vars['tech_support'] = $resources[$resource['field_machine_name']];
          }
        }
      }
    }
    $vars['resources'] = $resources;
    // throw in username
    $vars['username'] = (isset($GLOBALS['user']->name) ? check_plain($GLOBALS['user']->name) : '');
    // set a login link if we don't have a user name
    if ($vars['username'] == '') {
      $vars['userlink'] = l(t('login'), 'user', array('attributes' => array('class' => array('account-logout', 'text-center', 'row'))));
    }
    else {
      $vars['userlink'] = l(t('log out'), 'user/logout', array('attributes' => array('class' => array('account-logout', 'text-center', 'row'))));
    }
    if (_cis_connector_role_groupings(array('staff','teacher')) || isset($_SESSION['masquerading'])) {
      $vars['admin_status_bar'] = array();
      // account for systems without sections (like authorities)
      if ($section) {
        $vars['admin_status_bar']['course-section'] = '<a href="#" data-reveal-id="block-cis-service-connection-section-context-changer-nav-modal" class="admin-alert middle-align-wrap"><span>' . $section . '</span></a>';
      }
      else {
        $vars['admin_status_bar']['course-section'] = '<span class="admin-alert middle-align-wrap">' . t('no sections') . '</span>';
      }
      if (isset($_SESSION['masquerading'])) {
        $tmp = user_load($_SESSION['masquerading']);
        $vars['admin_status_bar']['current-user-id'] = ' ' . l(t('Switch back to (@name)', array('@name' => $tmp->name)), 'masquerade/unswitch', array('query' => array('token' => drupal_get_token('masquerade/unswitch')), 'attributes' => array('class' => array('admin-alert', 'middle-align-wrap'))));
      }
      else {
        $vars['admin_status_bar']['current-user-id'] = ' <a href="#" data-reveal-id="block-masquerade-masquerade-nav-modal" class="admin-alert middle-align-wrap"><span>' . filter_xss($GLOBALS['user']->name) . '</span></a>';
      }
      // calculate roles
      $tmproles = $GLOBALS['user']->roles;
      unset($tmproles[1]);
      unset($tmproles[2]);
      // figure out how to present roles, don't assume there are roles
      if (!empty($tmproles)) {
        sort($tmproles);
        $vars['admin_status_bar']['user-role'] = '<span class="admin-alert middle-align-wrap">' . implode(' and ', $tmproles) . '</span>';
      }
    }
    $distro = variable_get('install_profile', 'standard');
    $reg = _cis_connector_build_registry();
    $tmp = explode('.', $reg[$distro]['address']);
    $machine_name = $tmp[0];
    // account for the current service being worked on but not actually
    // being actively used in the section in question
    $current = t('Current');
    $list[$current][$machine_name] = array(
      'title' => (isset($reg[$distro]['default_title']) ? $reg[$distro]['default_title'] : ''),
      'url' => $GLOBALS['base_url'] . '/' . _cis_connector_course_context(),
      'machine_name' => $machine_name,
    );
    // services label specific to course context
    $service_group = t('@course Services', array('@course' => _cis_connector_course_context()));
    // set active to the current one
    $vars['active'] = $list[$current][$machine_name];
    // request a list of all other services that this section uses
    if ($services = _cis_connector_transaction('other_services')) {
      foreach ($services as $service) {
        // ensure we don't get two of these to display
        if ($service['field_machine_name'] != $vars['active']['machine_name']) {
          $list[$service_group][$service['field_machine_name']] = array(
            'title' => $service['title'],
            'url' => $service['field_location']['url'] . '/' . _cis_connector_course_context(),
            'machine_name' => $service['field_machine_name'],
          );
        }
      }
    }
    // allow theme to override this if set
    $theme_override = theme_get_setting('foundation_access_system_label');
    if (!empty($theme_override)) {
      $vars['active']['title'] = $theme_override;
    }
    // add in links to the Authority systems if permission exists
    // @ignore druplart_conditional_assignment
    $administrative = t('Administrative');
    if (user_access('view lmsless cis link') && is_array($reg)) {
      foreach ($reg as $key => $value) {
        $addr = explode('.', $value['address']);
        if (!$value['instance'] && $addr[0] != $vars['active']['machine_name']) {
          $list[$administrative][$addr[0]] = array(
            'title' => $reg[$key]['default_title'],
            'url' => _cis_connector_format_address($reg[$key],  '/' . _cis_connector_course_context(), 'front'),
            'machine_name' => $addr[0],
          );
        }
      }
      // contextual link for the service creation stuff inline
      $vars['service_option_link'] = _cis_connector_format_address($reg['cis'],  '/' . _cis_connector_course_context(), 'front') . 'service-instances';
    }
    $vars['services'] = $list;
    // support for search bar if active
    if (module_exists('search') && user_access('search content')) {
      $vars['search'] = drupal_get_form('search_block_form');
    }
    // if authority, remove the syllabus
    if (_cis_connector_system_type() == 'authority') {
      $vars['bar_elements'] = array(
        'network' => TRUE,
        'user' => TRUE,
        'help' => TRUE,
        'syllabus' => FALSE
      );
    }
    // allow other projects to alter these values
    drupal_alter('cis_lmsless_theme_vars', $vars);
  }
  return $vars;
}

/**
 * Implements hook_theme().
 */
function cis_lmsless_theme() {
  return array(
    'cis_lmsless_bar' => array(
      'variables' => array(
        'front_page' => 'node',
        'site_name' => t('Service'),
        'section' => t('Master Section'),
        'active' => array('title' => ''),
        'services' => array(),
        'tour' => url('guided_tour'),
        'main_menu' => menu_tree(variable_get('menu_main_links_source', 'main-menu')),
        'help_link' => url('course-help'),
        'search' => '',
        'username' => t('Account'),
        'userlink' => '',
        'resources' => array(),
        'tech_support' => array(),
        'admin_status_bar' => array(),
        'bar_elements' => array('network' => TRUE, 'user' => TRUE, 'help' => TRUE, 'syllabus' => TRUE),
      ),
      'render element' => 'element',
      'template' => 'templates/cis-lmsless-bar',
    ),
    'cis_lmsless_contextual_links' => array(
      'render element' => 'element',
      'template' => 'templates/cis-lmsless-contextual-links',
    ),
    'cis_lmsless_contextual_container' => array(
      'render element' => 'element',
      'template' => 'templates/cis-lmsless-contextual-container',
      'variables' => array(
        'short' => 'short',
        'cis_links' => array(),
      ),
    ),
  );
}
