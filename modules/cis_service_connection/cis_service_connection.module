<?php
define('CIS_SERVICE_CONNECTION_SYNC_FREQUENCY', 1);
define('CIS_SERVICE_CONNECTION_HOMEPAGE', 'welcome_letter');
/**
 * Implements hook_init().
 */
function cis_service_connection_init() {
}

/**
 * Implements hook_thumbnav_widget().
 */
function cis_service_connection_thumbnav_widget() {
  $widgets = array(
    'cis_service_connection_inst_contact' => array(
      'icon' => base_path() . drupal_get_path('module', 'cis_service_connection') . '/images/inst_contact.png',
      'title' => t('Instructor contact'),
      'inc' => drupal_get_path('module', 'cis_service_connection') . '/js/cis_service_connection_inst_contact.js',
      'weight' => 1,
      'side' => 'right',
    ),
    'cis_service_connection_section_context' => array(
      'icon' => base_path() . drupal_get_path('module', 'cis_service_connection') . '/images/section_context.png',
      'title' => t('Section change'),
      'inc' => drupal_get_path('module', 'cis_service_connection') . '/js/cis_service_connection_section_context.js',
      'weight' => 6,
      'side' => 'right',
    ),
  );
  return $widgets;
}

/**
 * Implements hook_block_info().
 */
function cis_service_connection_block_info() {
  $blocks = array(
    'active_outline' => array(
      'info' => t('Instructional Outline'),
      'cache' => DRUPAL_CACHE_PER_USER,
    ),
    'instructor_contact' => array(
      'info' => t('Instructor Contact info'),
      'cache' => DRUPAL_CACHE_PER_USER,
    ),
    'section_context_changer' => array(
      'info' => t('Change Section context'),
      'cache' => DRUPAL_CACHE_PER_USER,
    ), 
  );
  return $blocks;
}
/**
 * Implements hook_block_view().
 */
function cis_service_connection_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'active_outline':
      $block = cis_service_connection_block_section_outline();
    break;
    case 'instructor_contact':
      $block['subject'] = t('Instructor Contact');
      $block['content'] = cis_service_connection_block_instructor_contact();
    break;
    case 'section_context_changer':
      if (user_access('switch section context')) {
        $block['subject'] = '<none>';
        $block['content'] = drupal_get_form('cis_service_connection_block_section_context_changer_form');
      }
    break;
  }
  return $block;
}

/**
 * Implements hook_permission().
 *
 * @return array
 */
function cis_service_connection_permission() {
  return array(
    'switch section context' => array(
      'title' => t('Switch Section context'),
      'description' => t('Allows user to utilize a block that switches the reported section context.'),
    ),
  );
}
/**
 * Implements hook_menu().
 */
function cis_service_connection_menu() {
  $items = array();
  // standard language from cis
  $items['welcome_letter'] = array(
    'title' => 'Welcome',
    'page callback' => '_cis_connector_transaction',
    'page arguments' => array(0),
    'menu_name' => 'main-menu',
    'weight' => -1,
    'access arguments' => array('access content'),
  );
  // standard language from cis
  $items['syllabus'] = array(
    'title' => 'Syllabus',
    'page callback' => '_cis_connector_transaction',
    'page arguments' => array(0),
    'menu_name' => 'main-menu',
    'weight' => 0,
    'access arguments' => array('access content'),
  );
  // standard language from cis for help
  $items['help'] = array(
    'title' => 'Help',
    'page callback' => '_cis_service_connection_page',
    'page arguments' => array(0),
    'menu_name' => 'main-menu',
    'weight' => 1,
    'access arguments' => array('access content'),
  );
  // standard language from cis
  $items['resources'] = array(
    'title' => 'Resources',
    'page callback' => '_cis_service_connection_page',
    'page arguments' => array(0),
    'menu_name' => 'main-menu',
    'weight' => 2,
    'access arguments' => array('access content'),
  );
  // direct download of the welcome letter, useful for remote referencing
  $items['welcome_letter/download'] = array(
    'title' => 'Welcome letter',
    'page callback' => '_cis_connector_transaction',
    'page arguments' => array(0, 1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  // direct download of the welcome letter, useful for remote referencing
  $items['materials_letter/download'] = array(
    'title' => 'Materials letter',
    'page callback' => '_cis_connector_transaction',
    'page arguments' => array(0, 1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  // direct download of the syllabus, useful for remote referencing
  $items['syllabus/download'] = array(
    'title' => 'Syllabus',
    'page callback' => '_cis_connector_transaction',
    'page arguments' => array(0, 1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  // redirect to the active instructional outline
  $items['instructional_outline/redirect'] = array(
    'title' => 'Instructional Outline',
    'page callback' => '_cis_connector_transaction',
    'page arguments' => array(0, 1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Callback to assemble pages correctly.
 */
function _cis_service_connection_page($request) {
  $output = '';
  if (module_exists('tableofcontents')) {
    $suffix = '[toc]';
  }
  else {
    $suffix = '';
  }
  // allow for per option processing
  switch ($request) {
    case 'help':
      // first thing student sees is instructor contact info
      $info = _cis_connector_transaction('contact_info');
      // render text applying the input filter requested
      if (isset($info['value'])) {    
        $suffix .= '<h2>' . t('Instructor Contact') . '</h2>' . $info['value'];
      }
    break;
  }
  // apply traditional transaction for the request
  $body = _cis_connector_transaction($request);
  if (isset($body['value'])) {
    $body['value'] = $suffix . $body['value'];
    // check the markup of the format
    $output .= check_markup($body['value'], $body['format']);
    // only process if enabled
    if (module_exists('tableofcontents')) {
      _tableofcontents_process_text($output);
    }
  }
  return $output;
}

/**
 * Implements hook_cron().
 */
function cis_service_connection_cron() {
  $frequency = variable_get('cis_service_connection_sync_frequency', CIS_SERVICE_CONNECTION_SYNC_FREQUENCY);
  $interval = 86400 * $frequency;
  // if last sync isn't set this is the first cron run
  if (variable_get('cis_service_connection_last_sync', 0) == 0) {
    // perform the initial setup routine
    // this will help bind the CIS to this instance of the service
    _cis_service_connection_initial_cis_bind();
  }
  // if last sync is less then the update interval, update
  if ((REQUEST_TIME - variable_get('cis_service_connection_last_sync', 0)) > $interval) {
    // select the service instance in question based on uuid
    $select = array(
      'type' => 'service_instance',
      'uuid' => variable_get('cis_service_instance_uuid', '')
    );
    $data = module_invoke_all('set_cis_service_data', 'interval');
    // set the data in the CIS
    _cis_connection_set_data($select, $data);
    variable_set('cis_service_connection_last_sync', REQUEST_TIME);
  }
	// clear cached versions of section queries regardless of condition
	_cis_connector_cache_clear();
}

/**
 * Helper function to set footer language from CIS.
 */
function cis_service_connection_get_footer_language() {
  // request the standard footer language
  $query = array('type' => 'resource', 'field_machine_name' => 'footer_language');
  $response = _cis_connection_query($query);
  // render text applying the input filter requested
  $text = str_replace('!current', date('Y'), $response['list'][0]['body']['value']);
  // load box object
  $footer = boxes_box_load('site_footer');
  if (isset($footer->options)) {
    // set text as the body of the block/box
    $footer->options['body']['value'] = $text;
    // ensure correct format is in use
    $footer->options['body']['format'] = $response['list'][0]['body']['format'];
    // save
    $footer->save();
  }
}

/**
 * Initial cron job to formally bind the CIS Service to the CIS.
 */
function _cis_service_connection_initial_cis_bind() {
  // select the service instance in question based on uuid
  $select = array(
    'type' => 'service_instance',
    'uuid' => variable_get('cis_service_instance_uuid', '')
  );
  // report back data based on hook being invoked
  $data = module_invoke_all('set_cis_service_data', 'initial');
  // set the data in the CIS
  _cis_connection_set_data($select, $data);
  // ask for the LTI request that will be recognized locally
  if (module_exists('lti_tool_provider')) {
    _cis_service_lti_get_consumer();
  }
  // get the latest footer copy language
  cis_service_connection_get_footer_language();
  // set last sync time
  variable_set('cis_service_connection_last_sync', REQUEST_TIME);
}

/**
 * Implements hook_set_cis_service_data().
 */
function cis_service_connection_set_cis_service_data($delta) {
  switch ($delta) {
    case 'initial':
      // only set cron key on the first time this runs against a service
      $data = array(
        'field_cron_key' => variable_get('cron_key', ''),
      );
    break;
  }
  return $data;
}

/**
 * Render a block based on section context
 */
function cis_service_connection_block_section_outline() {
  // ensure this doesn't load when it doesn't have to
  $block = &drupal_static(__FUNCTION__);
  if (!isset($block)) {
    // never load when on an edit form in case it gets called
    if (arg(2) != 'edit') {
      $uuid = _cis_connector_transaction('instructional_outline');
      // ensure that the section context defined an outline to use
      if (isset($uuid)) {
        // array cast as it expects multiple
        $entities = entity_uuid_load('node', array($uuid));
        // pop off our 1 book root node
        $node = array_pop($entities);
        $active = menu_get_object();
        if (!isset($active->book)) {
          $active = $node;
        }
        // only show the block if the user has view access for the top-level node.
        if (entity_access('view', 'node', $active) && isset($active->book)) {
          $tree = menu_tree_all_data($active->book['menu_name'], $active->book);
          // There should only be one element at the top level.
          $data = array_shift($tree);
          $block['subject'] = $node->book['link_title'];
          $block['content'] = menu_tree_output($data['below']);
          return $block;
        }
      }
    }
  }
  else {
    return $block;
  }
  return FALSE;
}

/**
 * Callback for instructor contact block content.
 */
function cis_service_connection_block_instructor_contact() {
  //pull contact info from cis
  $info = _cis_connector_transaction('contact_info');
  // ensure we have contact info to display
  if (!empty($info)) {
    // run listed input filter
    return check_markup($info['value'], $info['format']);
  }
  return FALSE;
}

/**
 * Callback to render a list of optional section contexts to cycle through
 */
function cis_service_connection_block_section_context_changer_form() {
  // provide all sections of students in this course
  $sections = cis_service_connection_all_section();
  $form = array();
  $form['section'] = array(
    '#type' => 'select',
    '#options' => $sections,
    '#title' => t('Section to view'),
    '#description' => t('Use this to view the course as a specific section would see it'),
    '#default_value' => _cis_connector_section_context(),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Switch section'),
  );
  // check for section context override
  if (isset($_SESSION['cis_section_context'])) {
    $form['reset'] = array(
      '#type' => 'submit',
      '#value' => t('Reset'),
    );
  }
  return $form;
}

/**
 * Submit handler for the context changer block.
 */
function cis_service_connection_block_section_context_changer_form_submit($form, &$form_state) {
  // set global state or unset the context switch
  if ($form_state['input']['op'] == 'Reset') {
    unset($_SESSION['cis_section_context']);
  }
  else {
    $_SESSION['cis_section_context'] = $form_state['values']['section'];
  }
}

/**
 * Return all found profile2 sections as these are valid for switching
 */
function cis_service_connection_all_section() {
  $sections = array();
  // select field section data
  $result = db_select('field_data_field_section', 'fdfs')
  // return the section value
  ->fields('fdfs', array('field_section_value'))
  // only pull distinct values
  ->distinct()
  ->execute();
  // convert to a readable array of options
  foreach ($result as $val) {
    $sections[$val->field_section_value] = $val->field_section_value;
  }
  // useful for custom college / university integrations
  drupal_alter('cis_section_list', $sections);
  return $sections;
}